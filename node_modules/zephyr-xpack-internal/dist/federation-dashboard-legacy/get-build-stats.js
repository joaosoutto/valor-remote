"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuildStats = getBuildStats;
const FederationDashboardPlugin_1 = require("./utils/federation-dashboard-plugin/FederationDashboardPlugin");
const zephyr_agent_1 = require("zephyr-agent");
async function getBuildStats({ stats, stats_json, pluginOptions, EDGE_URL, DOMAIN, PLATFORM, TYPE, DELIMITER: delimiter = undefined, }) {
    (0, zephyr_agent_1.ze_log)('get build stats started. create federation dashboard plugin');
    const app = pluginOptions.zephyr_engine.applicationProperties;
    const { git } = pluginOptions.zephyr_engine.gitProperties;
    const { isCI } = pluginOptions.zephyr_engine.env;
    const dashboardPlugin = new FederationDashboardPlugin_1.FederationDashboardPlugin({
        app,
        git,
        context: {
            isCI,
        },
    });
    (0, zephyr_agent_1.ze_log)('process webpack graph.pluginOptions', pluginOptions);
    const convertedGraph = dashboardPlugin.processWebpackGraph({
        stats,
        stats_json,
        pluginOptions,
    });
    if (!convertedGraph) {
        throw new zephyr_agent_1.ZephyrError(zephyr_agent_1.ZeErrors.ERR_CONVERT_GRAPH_TO_DASHBOARD);
    }
    const version = await pluginOptions.zephyr_engine.snapshotId;
    const application_uid = pluginOptions.zephyr_engine.application_uid;
    const buildId = await pluginOptions.zephyr_engine.build_id;
    // todo: add support for multiple fedeation configs
    const mfConfig = Array.isArray(pluginOptions.mfConfig)
        ? pluginOptions.mfConfig[0]
        : pluginOptions.mfConfig;
    const { name, filename, remotes } = mfConfig?._options || mfConfig?.config || {};
    const data_overrides = {
        id: application_uid,
        name: name,
        edge: { url: EDGE_URL, delimiter },
        domain: DOMAIN,
        platform: PLATFORM,
        type: TYPE,
        app: Object.assign({}, app, { buildId }),
        version,
        git,
        remote: filename,
        remotes: Object.keys(remotes || {}),
        context: { isCI },
    };
    // todo: extend data
    const res = Object.assign({}, convertedGraph, data_overrides, {
        project: name, // Add missing project property
        tags: [], // Add missing tags property with empty array as default
    });
    (0, zephyr_agent_1.ze_log)('get build stats done.', res);
    return res;
}
//# sourceMappingURL=get-build-stats.js.map