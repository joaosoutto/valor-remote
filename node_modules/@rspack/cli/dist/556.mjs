export const __webpack_ids__ = [
    "556"
];
export const __webpack_modules__ = {
    "./src/utils/profile.ts": function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
        __webpack_require__.d(__webpack_exports__, {
            applyProfile: ()=>applyProfile
        });
        var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("node:fs");
        var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("node:path");
        var _rspack_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("@rspack/core");
        const overviewTraceFilter = "info";
        const allTraceFilter = "trace";
        const defaultRustTraceLayer = "chrome";
        function resolveLayer(value) {
            if ("OVERVIEW" === value) return overviewTraceFilter;
            if ("ALL" === value) return allTraceFilter;
            return value;
        }
        async function applyProfile(filterValue, traceLayer = defaultRustTraceLayer, traceOutput) {
            const { asyncExitHook } = await import("exit-hook");
            if ("chrome" !== traceLayer && "logger" !== traceLayer) throw new Error(`unsupported trace layer: ${traceLayer}`);
            if (!traceOutput) {
                const timestamp = Date.now();
                const defaultOutputDir = node_path__WEBPACK_IMPORTED_MODULE_1__["default"].resolve(`.rspack-profile-${timestamp}-${process.pid}`);
                const defaultRustTraceChromeOutput = node_path__WEBPACK_IMPORTED_MODULE_1__["default"].join(defaultOutputDir, "trace.json");
                const defaultRustTraceLoggerOutput = "stdout";
                const defaultTraceOutput = "chrome" === traceLayer ? defaultRustTraceChromeOutput : defaultRustTraceLoggerOutput;
                traceOutput = defaultTraceOutput;
            }
            const filter = resolveLayer(filterValue);
            await ensureFileDir(traceOutput);
            await _rspack_core__WEBPACK_IMPORTED_MODULE_2__.rspack.experiments.globalTrace.register(filter, traceLayer, traceOutput);
            asyncExitHook(_rspack_core__WEBPACK_IMPORTED_MODULE_2__.rspack.experiments.globalTrace.cleanup, {
                wait: 500
            });
        }
        async function ensureFileDir(outputFilePath) {
            const dir = node_path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(outputFilePath);
            await node_fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.mkdir(dir, {
                recursive: true
            });
        }
    }
};
