"use strict";
var _ZeHttpRequest_instances, _ZeHttpRequest_start, _ZeHttpRequest_url, _ZeHttpRequest_options, _ZeHttpRequest_data, _ZeHttpRequest_promise, _ZeHttpRequest_reject, _ZeHttpRequest_resolve, _ZeHttpRequest_request, _ZeHttpRequest_redact;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeHttpRequest = void 0;
const tslib_1 = require("tslib");
const errors_1 = require("../errors");
const token_1 = require("../node-persist/token");
const debug_1 = require("../logging/debug");
const zephyr_edge_contract_1 = require("zephyr-edge-contract");
const fetch_with_retries_1 = require("./fetch-with-retries");
/** Starts a new http request */
class ZeHttpRequest {
    constructor() {
        _ZeHttpRequest_instances.add(this);
        /** The time the request was started. */
        _ZeHttpRequest_start.set(this, Date.now());
        /** The URL to request. */
        _ZeHttpRequest_url.set(this, void 0);
        /** The options for the request. */
        _ZeHttpRequest_options.set(this, void 0);
        /** The data to send with the request. */
        _ZeHttpRequest_data.set(this, void 0);
        // private methods for resolving and rejecting the promise
        _ZeHttpRequest_promise.set(this, (0, zephyr_edge_contract_1.PromiseWithResolvers)());
        // promise extension
        this.then = tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_promise, "f").promise.then.bind(tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_promise, "f").promise);
    }
    /** Creates a new http request. */
    static from(urlStr, options = {}, data) {
        const req = new ZeHttpRequest();
        tslib_1.__classPrivateFieldSet(req, _ZeHttpRequest_data, data, "f");
        tslib_1.__classPrivateFieldSet(req, _ZeHttpRequest_options, options, "f");
        // Parse the url into a URL object
        if (typeof urlStr === 'string') {
            tslib_1.__classPrivateFieldSet(req, _ZeHttpRequest_url, new URL(urlStr), "f");
        }
        else if (urlStr instanceof URL) {
            tslib_1.__classPrivateFieldSet(req, _ZeHttpRequest_url, urlStr, "f");
        }
        else {
            tslib_1.__classPrivateFieldSet(req, _ZeHttpRequest_url, new URL(urlStr.path, urlStr.base), "f");
            for (const [key, value] of Object.entries(urlStr.query)) {
                tslib_1.__classPrivateFieldGet(req, _ZeHttpRequest_url, "f").searchParams.append(key, String(value));
            }
        }
        const is_preview = (0, zephyr_edge_contract_1.ZE_IS_PREVIEW)();
        const ze_api_endpoint_host = (0, zephyr_edge_contract_1.ZE_API_ENDPOINT_HOST)();
        const zephyr_api_endpoint = (0, zephyr_edge_contract_1.ZEPHYR_API_ENDPOINT)();
        // Add a query param hint in preview environments
        if (is_preview && tslib_1.__classPrivateFieldGet(req, _ZeHttpRequest_url, "f").host === ze_api_endpoint_host) {
            tslib_1.__classPrivateFieldGet(req, _ZeHttpRequest_url, "f").searchParams.set('api_host', zephyr_api_endpoint);
        }
        tslib_1.__classPrivateFieldGet(req, _ZeHttpRequest_instances, "m", _ZeHttpRequest_request).call(req);
        return req;
    }
    /** Transforms `Promise<HttpResponse<T>>` into `Promise<T>` */
    async unwrap() {
        const [ok, error, data] = await this;
        if (!ok) {
            throw error;
        }
        return data;
    }
}
exports.ZeHttpRequest = ZeHttpRequest;
_ZeHttpRequest_start = new WeakMap(), _ZeHttpRequest_url = new WeakMap(), _ZeHttpRequest_options = new WeakMap(), _ZeHttpRequest_data = new WeakMap(), _ZeHttpRequest_promise = new WeakMap(), _ZeHttpRequest_instances = new WeakSet(), _ZeHttpRequest_reject = function _ZeHttpRequest_reject(error) {
    tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_promise, "f").resolve([false, error]);
}, _ZeHttpRequest_resolve = function _ZeHttpRequest_resolve(data) {
    tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_promise, "f").resolve([true, null, data]);
}, _ZeHttpRequest_request = async function _ZeHttpRequest_request() {
    var _a, _b, _c, _d, _e, _f, _g;
    try {
        const response = await (0, fetch_with_retries_1.fetchWithRetries)(tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_url, "f"), Object.assign(Object.assign({}, tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_options, "f")), { body: tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_data, "f") }));
        if (!response) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_HTTP_ERROR, {
                content: 'No response found',
                method: (_b = (_a = tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_options, "f").method) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : 'GET',
                url: tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_url, "f").toString(),
                status: -1,
            });
        }
        const resText = await response.text();
        if (response.status === 401) {
            // Clean the tokens and throw an error
            await (0, token_1.cleanTokens)();
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_AUTH_ERROR, {
                message: 'Unauthenticated request',
            });
        }
        if (response.status === 403) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_AUTH_FORBIDDEN_ERROR, {
                message: 'Unauthorized request',
            });
        }
        const message = tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_instances, "m", _ZeHttpRequest_redact).call(this, resText);
        if (message === 'Not Implemented') {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_UNKNOWN, {
                message: 'Not implemented yet. Please get in contact with our support.',
            });
        }
        if (response.status === undefined) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_HTTP_ERROR, {
                content: 'No status code found',
                method: (_d = (_c = tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_options, "f").method) === null || _c === void 0 ? void 0 : _c.toUpperCase()) !== null && _d !== void 0 ? _d : 'GET',
                url: tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_url, "f").toString(),
                status: -1,
            });
        }
        if (!tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_url, "f").pathname.includes('application/logs')) {
            (0, debug_1.ze_log)(message);
        }
        // Only parses data if reply content is json
        const resData = (_e = (0, zephyr_edge_contract_1.safe_json_parse)(resText)) !== null && _e !== void 0 ? _e : resText;
        if (response.status >= 300) {
            throw new errors_1.ZephyrError(errors_1.ZeErrors.ERR_HTTP_ERROR, {
                status: response.status,
                url: tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_url, "f").toString(),
                content: resData,
                method: (_g = (_f = tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_options, "f").method) === null || _f === void 0 ? void 0 : _f.toUpperCase()) !== null && _g !== void 0 ? _g : 'GET',
            });
        }
        tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_instances, "m", _ZeHttpRequest_resolve).call(this, resData);
    }
    catch (error) {
        tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_instances, "m", _ZeHttpRequest_reject).call(this, error);
    }
}, _ZeHttpRequest_redact = function _ZeHttpRequest_redact(response) {
    var _a, _b;
    const str = [
        `[${tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_options, "f").method || 'GET'}][${tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_url, "f")}]: ${Date.now() - tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_start, "f")}ms`,
        ((_a = tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_data, "f")) === null || _a === void 0 ? void 0 : _a.length) ? ` - ${(((_b = tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_data, "f").length) !== null && _b !== void 0 ? _b : 0) / 1024).toFixed(2)}kb` : '',
        response ? `Response: ${response}` : '',
        tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_options, "f") ? `Options: ${JSON.stringify(tslib_1.__classPrivateFieldGet(this, _ZeHttpRequest_options, "f"))}` : '',
    ].join('\n');
    return str
        .replace(/Bearer ([^"|']+)/gi, 'Bearer [REDACTED]')
        .replace(/"?jwt"?:["|\W']{0,2}([^"|']+)(["|'])/gi, 'jwt: [REDACTED]');
};
//# sourceMappingURL=ze-http-request.js.map